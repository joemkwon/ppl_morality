var simulateMDPAgentOptimal = function(startState, world, agent, outputType) {
  // if outputType is undefined, default to states
  var act = agent.act;
  var transition = world.transition;
  var outputType = outputType ? outputType : 'states';

  var selectOutput = function(state, action) {
    var table = {
      states: state,
      actions: action,
      stateAction: [state, action]
    };
    return table[outputType];
  };

  var sampleSequence = function(state) {
    var action = sample(act(state));
    var nextState = transition(state, action);
    var out = selectOutput(state, action);
    return state.terminateAfterAction ? [out] :
      [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};


var simulateMDPAgentHyperbolic = function(startState, world, agent, outputType) {
  var act = agent.act;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;
  var outputType = outputType ? outputType : 'states';

  var selectOutput = function(state, action) {
    var table = {
      states: state,
      actions: action,
      stateAction: [state, action]
    };
    return table[outputType];
  };

  var sampleSequence = function(state) {
    var delay = 0;
    var action = sample(act(state, delay));
    var nextState = transition(state, action);
    var out = selectOutput(state, action);
    return state.terminateAfterAction ? [out] : [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};


var simulateMDP = function(startState, world, agent, outputType) {
  var params = agent.params;
  if (isOptimalMDPAgent(params)) {
    return simulateMDPAgentOptimal(startState, world, agent, outputType)
  } else {
    return simulateMDPAgentHyperbolic(startState, world, agent, outputType)
  }
};

// trajectory must consist only of states. This can be done by calling
// *simulate* with an additional final argument 'states'.
var getExpectedUtilitiesMDP = function(stateTrajectory, world, agent) {
  var eu = agent.expectedUtility;
  var actions = world.actions;
  var getAllExpectedUtilities = function(state) {
    var actionUtilities = map(
      function(action){ return eu(state, action); },
      actions);
    return [state, actionUtilities];
  };
  return map(getAllExpectedUtilities, stateTrajectory);
};

// makeGridWorldMDP.wppl
var isGoalLocation = function(feature) {
  // Define goal locations
  var goalFeatures = ['Hospital', 'Coffee'];
  return goalFeatures.includes(feature.name);
};

var isWalkable = function(feature) {
  // Define walkable terrain types
  var walkableFeatures = ['Sidewalk', 'Grass'];
  return walkableFeatures.includes(feature.name);
};


var inGrid_ = function(gridMap, loc) {
  return (loc[0] >= 0 && loc[0] < gridMap.xLim &&
    loc[1] >= 0 && loc[1] < gridMap.yLim);
}

var isBlockedLoc = function(gridMap, loc) {
  var getFeature = gridMap.feature;
  var feature = getFeature({
    loc: loc
  });
  return feature === '#';
}

var isAllowedState_ = function(gridMap, loc) {
  return (inGrid_(gridMap, loc)) && !isBlockedLoc(gridMap, loc);
};

var advanceStateTime = function(state) {
  return extend(state, {
    timeLeft: state.timeLeft - 1,
    terminateAfterAction: state.timeLeft - 1 > 1 ? state.terminateAfterAction : true,
    previousLoc: state.loc
  });
};

var addPrevious = function(state) {
  return extend(state, {
    previousLoc: state.loc
  });
};

var advanceRestaurant = function(state, maxTimeAtRestaurant) {
  var timeAtRestaurant = ((state.timeAtRestaurant === undefined) ? 0 :
                          state.timeAtRestaurant + 1);
  var state = extend(state, { timeAtRestaurant });
  if (state.timeAtRestaurant < maxTimeAtRestaurant - 1) {
    return state;
  } else {
    return extend(state, { terminateAfterAction: true });
  }
};


var moveState = function(gridMap, state, action) {
  var loc = state.loc;
  var gridTransition = {
    l: [loc[0] - 1, loc[1]],
    r: [loc[0] + 1, loc[1]],
    u: [loc[0], loc[1] + 1],
    d: [loc[0], loc[1] - 1]
  };

  var possibleNextLoc = gridTransition[action];
  assert.ok(possibleNextLoc != undefined, 'action was not found');

  var nextLoc = isAllowedState_(gridMap, possibleNextLoc) ? possibleNextLoc : loc;
  return extend(state, {
    loc: nextLoc
  });
};

// var makeGridTransition_ = function(gridMap, options) {
//   return function(state, action) {
//     var getFeature = gridMap.feature;
//     var state = options.noReverse ? addPrevious(state) : state;
//     var state = !getFeature(state).name ? advanceStateTime(state) : state;

//     var state = !getFeature(state).name ? moveState(gridMap, state, action) : state;
//     var state = getFeature(state).name ? advanceRestaurant(state, options.maxTimeAtRestaurant) : state;

//     return state;
//   };
// };

var makeGridTransition_ = function(gridMap, options) {
  return function(state, action) {
    var getFeature = gridMap.feature;
    var feature = getFeature(state);

    var state = options.noReverse ? addPrevious(state) : state;
    var state = isWalkable(feature) ? advanceStateTime(state) : state;  // Update to include isWalkable
    var state = isWalkable(feature) ? moveState(gridMap, state, action) : state;  // Update to include isWalkable

    // Check if the feature is a goal to determine if the simulation should terminate
    if (isGoalLocation(feature)) {
      var state = advanceRestaurant(state, options.maxTimeAtRestaurant);  // This might need renaming or reimplementation 
    }

    return state;
  };
};


var makeGridMap = function(rfeatures) {
  var features = rfeatures.reverse();
  return {
    features: features,
    xLim: features[0].length,
    yLim: features.length,
    feature: function(state) {
      return features[state.loc[1]][state.loc[0]];
    }
  };
};

var makeGridWorldDeterministic = function(features, options) {
  var defaults = {
    noReverse: false,
    maxTimeAtRestaurant: 1
  };
  var options = extend(defaults, options);

  var gridMap = makeGridMap(features);

  var transition = makeGridTransition_(gridMap, options);
  var actions = ['l', 'r', 'u', 'd'];

  var stateToActions = function(state) {

    var possibleActions = filter(function(action) {
      var newState = transition(state, action);
      if (options.noReverse &&
        state.previousLoc &&
        state.previousLoc[0] === newState.loc[0] && state.previousLoc[1] === newState.loc[1]) {
        return false;
      }
      return state.loc[0] !== newState.loc[0] || state.loc[1] !== newState.loc[1];
    }, actions);

    if (possibleActions.length > 0) {
      return possibleActions;
    } else {
      return [actions[0]];
    }
  };

  return extend(gridMap, { transition, actions, stateToActions });
};


var makeGridWorldMDP = function(options) {

  var defaults = {
    noReverse: false,
    maxTimeAtRestaurant: 1,
    transitionNoiseProbability: 0,
    start: [0, 0],
    totalTime: 2
  };

  var options = extend(defaults, options);

  map(function(el) {
    assert.ok(_.isString(el) || _.isString(el.name), 'grid is invalid')
  }, _.flatten(options.grid));

  assert.ok(options.totalTime >= 1,
            'totalTime is invalid');
  assert.ok(options.transitionNoiseProbability <= 1,
            'transitionNoiseProbability is invalid');
  assert.ok(options.start.length == 2,
            'start is invalid');

  var world = (
    (options.transitionNoiseProbability == 0) ?
    makeGridWorldDeterministic(options.grid, options) :
    makeNoisyGridworld(options.grid, options, options.transitionNoiseProbability));

  var startState = {
    loc: options.start,
    terminateAfterAction: false,
    timeLeft: options.totalTime
  };

  // // assumes that utilities are only defined on named features and timeCost
  // // doesnt work for the hyperbolic case
  // var makeUtilityFunction = function(utilityTable) {
  //   assert.ok(utilityTable.hasOwnProperty('timeCost'),
  //             'makeUtilityFunction utilityTable lacks timeCost');
  //   return function(state, action) {
  //     var getFeature = world.feature;
  //     var feature = getFeature(state);

  //     if (feature.name) {
  //       return utilityTable[feature.name];
  //     }
  //     return utilityTable.timeCost;
  //   };
  // };

  // return { world, startState, makeUtilityFunction };

  var makeUtilityFunction = function(utilityTable) {
    return function(state, action) {
      var getFeature = world.feature;
      var feature = getFeature(state);

      // Assign utility based on feature type
      if (isGoalLocation(feature)) {
        return utilityTable[feature.name];
      } else if (isWalkable(feature)) {
        return utilityTable[feature.name];
      }
      return utilityTable.timeCost;  // Default utility, e.g., for moving actions
    };
  };

  return { world, startState, makeUtilityFunction };

};

// Set up agent structure
var makeMDPAgent = function(params, world) {
  var stateToActions = world.stateToActions;
  var transition = world.transition;
  var utility = params.utility;
  var alpha = params.alpha;

  var act = dp.cache(
    function(state) {
      return Infer({ model() {
        var action = uniformDraw(stateToActions(state));
        var eu = expectedUtility(state, action);
        factor(alpha * eu);
        return action;
      }});
    });

  var expectedUtility = dp.cache(
    function(state, action){
      var u = utility(state, action);
      if (state.terminateAfterAction){
        return u;
      } else {
        return u + expectation(Infer({ model() {
          var nextState = transition(state, action);
          var nextAction = sample(act(nextState));
          return expectedUtility(nextState, nextAction);
        }}));
      }
    });

  return { params, expectedUtility, act };
};

var simulate = function(startState, world, agent) {
  var act = agent.act;
  var transition = world.transition;
  var sampleSequence = function(state) {
    var action = sample(act(state));
    var nextState = transition(state, action);
    if (state.terminateAfterAction) {
      return [state];
    } else {
      return [state].concat(sampleSequence(nextState));
    }
  };
  return sampleSequence(startState);
};

// Set up world

var makeMDP = function(options) {
  var H = { name: 'Hospital' };
  var C = { name: 'Coffee' };
  var G = { name: 'Grass' };
  var S = { name: 'Sidewalk' };
  var ___ = ' ';

  var grid = [
    [S, S, S, S, H],
    [S, G, G, G, S],
    [S, G, G, G, C],
    [S, S, S, S, S],
    [S, S, S, S, S]
  ];
  return makeGridWorldMDP(_.assign({ grid }, options));
};

var mdp = makeMDP({
  start: [0, 4],
  totalTime: 20,
  transitionNoiseProbability: 0.03
});

var makeUtilityFunction = mdp.makeUtilityFunction;

// Create parameterized agent
var utility = makeUtilityFunction({
  Hospital: 100,
  Coffee: 10,
  Sidewalk: -2,
  Grass: -2,
  timeCost: -.1
});
var agent = makeMDPAgent({ utility, alpha: 100 }, mdp.world);

// Run agent on world
var trajectory = simulateMDP(mdp.startState, mdp.world, agent, 'states');
var actionExpectedUtilities = getExpectedUtilitiesMDP(trajectory, mdp.world, agent);

viz.gridworld(mdp.world, { trajectory, actionExpectedUtilities });